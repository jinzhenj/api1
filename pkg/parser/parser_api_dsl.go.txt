package parser

import (
	"bytes"
	"io/ioutil"
	"strings"

	"github.com/go-logr/logr"
)

const (
	retDef              = "return"
	maxEmbedStructDepth = 5
)

func NewParserApiFile(log logr.Logger, fileName string) *ParserApiFile {
	return &ParserApiFile{log: log, fileName: fileName}
}

type ParserApiFile struct {
	log      logr.Logger
	fileName string
}

func (o ParserApiFile) ParsrApiDefFile() ([]types.HttpHandler, error) {
	content, err := ioutil.ReadFile(o.fileName)
	if err != nil {
		return nil, err
	}
	return o.ParserApiDef(string(content))
}

func (o ParserApiFile) ParserApiDef(content string) ([]types.HttpHandler, error) {
	ret := make([]types.HttpHandler, 0)
	mayHandlerStrContent, err := extractBracesBlock(o.log, bytes.NewReader([]byte(content)), reSvcDefPrefix)
	if err != nil {
		o.log.Error(err, "failed to parse api def when extract block", "content", content)
		return nil, err
	}
	o.log.V(6).Info("parser_api_def", "found blocks", mayHandlerStrContent)
	for _, line := range mayHandlerStrContent {
		noBraceContents := reMultiLineBracesContent.FindAllString(line, -1)
		o.log.V(6).Info("parser_api_def", "no remove braces", noBraceContents, "line", line)
		if len(noBraceContents) == 0 {
			continue
		}
		resource := trimSpace(strings.Split(strings.Trim(reMultiLineBracesContent.ReplaceAllString(line, ""), " \n\t"), " ")[1])
		for _, block := range extractHanderDefBlocks(noBraceContents[0]) {
			handler, err := o.parserHandler(strings.Trim(block, " \n\t{}"))
			if err != nil {
				o.log.Error(err, "failed to parse hanlder", "block", block)
				return nil, err
			}
			handler.Resource = resource
			ret = append(ret, *handler)
		}
	}
	return ret, nil
}

func (o ParserApiFile) parserHandler(s string) (*types.HttpHandler, error) {
	var ret types.HttpHandler
	ns := strings.Trim(usingWhiteSpace(s), " \n\t")
	o.log.V(8).Info("parser Handler", "input", s, "normalized input", ns)

	// may get doc
	docCotents := reHandlerDoc.FindAllString(ns, -1)
	if len(docCotents) != 0 {
		ret.Doc = o.parserDoc(docCotents[0])
		o.log.V(8).Info("parser handler", "doc", docCotents)
	}

	ns = reHandlerDoc.ReplaceAllString(ns, "")

	// get handler
	handlerContents := reHanderHander.FindAllString(ns, 1)
	if len(handlerContents) != 1 {
		o.log.Error(ErrMultiHandlerFound, "extract handler def", "handlers", handlerContents, "params", ns)
	}
	handlerTokens := reToken.FindAllString(handlerContents[0], -1)
	ret.Name = handlerTokens[1]

	ns = reHanderHander.ReplaceAllString(ns, "")

	// get the rest info of handler, parser `get /api/user/search (pkg.config.UserSearchReq) returns (pkg.config.UserInfoReply)`
	for _, line := range strings.Split(ns, "\n") {
		if len(reEmptyLineWithSpace.FindAllString(line, -1)) > 0 {
			continue
		}
		o.parseHanlderInfo(line, &ret)
		break
	}
	return &ret, nil
}

// underlayer functions
func (o ParserApiFile) parserDoc(s string) *types.HandlerDoc {
	o.log.V(6).Info("parse doc", "source string", s)
	var ret types.HandlerDoc
	ns := strings.Trim(usingWhiteSpace(s), " \n\t")

	strs := strings.Split(ns, "\n")
	if !strings.Contains(strs[0], "@doc") {
		o.log.Info("no doc found when trying parse", "content", strs[0], "source", s)
		return nil
	}

	for i, line := range strs[1:] {
		o.log.V(6).Info("parser doc", "line_no", i, "content", line)
		if i == len(strs)-2 {
			break
		}
		matched := regUnicodeStr.FindAllString(line, -1)
		if len(matched) == 0 {
			o.log.Info("no token found when trying parse doc", "content", line)
			continue
		}
		o.log.V(6).Info("matched doc", "records", matched)
		switch matched[0] {
		case string(types.HandlerDocAttrSummary):
			ret.Summary = strings.Join(matched[1:], " ")
		case string(types.HandlerDocAttrDescription):
			ret.Description = strings.Join(matched[1:], " ")
		default:
			o.log.Info("unkonwn content of doc", "content", line)
		}
	}

	return &ret
}

func (o ParserApiFile) parseHanlderInfo(s string, handler *types.HttpHandler) error {
	tokens := reHandlerToken.FindAllString(strings.Trim(s, " \t\n"), -1)
	o.log.V(6).Info("parser handler info", "tokens", tokens)
	if 2 > len(tokens) {
		return ErrInvalidHttpHandlerDef
	}
	handler.Method = tokens[0]
	handler.Endpoint = tokens[1]

	if len(tokens) > 2 {
		if tokens[2] == retDef {
			handler.Res = o.parseHandlerBodyMethod(tokens[3])
		} else {
			handler.Req = o.parseHandlerBodyMethod(tokens[2])
			if len(tokens) == 5 { // why is 5? len([method, url, req, return, res]) == 5
				handler.Res = o.parseHandlerBodyMethod(tokens[4])
			}
		}
	}
	return nil
}

// (pkg.config.UserSearchReq{list=[]string, records=[]int})
func (o ParserApiFile) parseHandlerBodyMethod(s string) *types.HandlerBodyParams {
	var ret types.HandlerBodyParams
	str := strings.Trim(s, "()")
	namesMap := make(map[string]bool)
	ret.Kind = &types.TypeD{Val: reBracesContent.ReplaceAllString(str, "")}

	params := []string{str}

	for depth := 0; depth < maxEmbedStructDepth; depth++ {
		if len(params) == 0 {
			break
		}
		tmp := make([]string, 0)

		for _, line := range params {
			newName, m := ExtractNestedReplacedStruct(line)
			namesMap[newName] = true

			for _, val := range m {
				tmp = append(tmp, val)
			}
		}
		params = tmp
	}
	ret.RelatedNames = namesMap
	ret.Value = s
	return &ret
}
